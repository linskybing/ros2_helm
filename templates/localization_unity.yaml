{{- if eq .Values.role "localization-unity" }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Values.pod.name }}
  labels:
    user: {{ .Values.labels.user }}
    app: pros_app
spec:
  nodeSelector:
    kubernetes.io/hostname: k8s-work1
  containers:
    - name: rplidar
      image: "{{ .Values.image.registry }}/screamlab/pros_jetson_driver_image:0.1.0"
      envFrom:
        - configMapRef:
            name: localization-unity-env-config
      volumeMounts:
        - name: demo-volume
          mountPath: /workspace/demo
      command: ["/bin/bash", "-c"]
      args:
        - |
          source /opt/ros/humble/setup.bash && \
          source /workspaces/install/setup.bash && \
          ros2 launch /workspace/demo/rplidar_unity.xml

    # -------------------- lidar-transform service --------------------
    - name: lidar-transform
      image: "{{ .Values.image.registry }}/screamlab/pros_unity_lidar_trans_image:latest"
      envFrom:
        - configMapRef:
            name: localization-unity-env-config
      command: ["/bin/bash", "-c"]
      args:
        - |
          source /opt/ros/humble/setup.bash && \
          source /workspaces/install/setup.bash && \
          ros2 run unity_lidar_transformer lidar_transformer_node

    # # -------------------- localization service --------------------
    - name: localization
      image: "{{ .Values.image.registry }}/screamlab/pros_jetson_driver_image:0.1.0"
      envFrom:
        - configMapRef:
            name: localization-unity-env-config
      volumeMounts:
        - name: demo-volume
          mountPath: /workspace/demo
      command: ["/bin/bash", "-c"]
      args:
        - |
          source /opt/ros/humble/setup.bash && \
          source /workspaces/install/setup.bash && \
          ros2 launch /workspace/demo/localization_unity.xml

    # -------------------- rosbridge service --------------------
    - name: rosbridge
      image: "{{ .Values.image.registry }}/screamlab/pros_jetson_driver_image:0.1.0"
      envFrom:
        - configMapRef:
            name: localization-unity-env-config
      ports:
        - containerPort: 9090
      command: ["/bin/bash", "-c"]
      args:
        - |
          source /opt/ros/humble/setup.bash && \
          source /workspaces/install/setup.bash && \
          ros2 launch rosbridge_server rosbridge_websocket_launch.xml

    # -------------------- navigation service --------------------
    - name: navigation
      image: "{{ .Values.image.registry }}/screamlab/pros_jetson_driver_image:0.1.0"
      envFrom:
        - configMapRef:
            name: localization-unity-env-config
      volumeMounts:
        - name: demo-volume
          mountPath: /workspace/demo
      command: ["/bin/bash", "-c"]
      args:
        - |
          source /opt/ros/humble/setup.bash && \
          source /workspaces/install/setup.bash && \
          ros2 launch /workspace/demo/navigation_unity.xml
  
    # -------------------- car control service --------------------   
    - name: pros-car
      image: "{{ .Values.image.registry }}/screamlab/pros_car_docker_image:latest"
      command: ["/bin/bash", "-c", "--"]
      args: ["trap : TERM INT; sleep infinity & wait"]
      envFrom:
        - configMapRef:
            name: localization-unity-env-config
      volumeMounts:
        - name: src-volume
          mountPath: /workspaces/src
        - name: screenshots-volume
          mountPath: /workspaces/screenshots

      resources:
        requests:
          memory: "256Mi"
        limits:
          nvidia.com/gpu: 1  # 要啟用 GPU，需有 NVIDIA device plugin
  # -------------------- Shared volume definition --------------------
  volumes:
    - name: demo-volume
      hostPath:
        path: "{{ .Values.workspace.path }}/pros_app/docker/compose/demo" # Replace with actual host path
        type: Directory
    - name: src-volume
      hostPath:
        path: "{{ .Values.workspace.path }}/pros_car/src"
        type: Directory
    - name: screenshots-volume
      hostPath:
        path: "{{ .Values.workspace.path }}/pros_car/screenshots"
        type: Directory
---
# Environment variable configuration (must create ConfigMap first)
apiVersion: v1
kind: ConfigMap
metadata:
  name: localization-unity-env-config
data:
  ROS_DOMAIN_ID: "{{ .Values.domain.id }}"
  WHEEL_SPEED: "10"
{{- end }}